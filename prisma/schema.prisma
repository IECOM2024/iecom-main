// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = [ "metrics", "tracing"]
    binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum Uploaded {
    YES
    NO
}

enum UserRole {
    PARTICIPANT
    ADMIN
}

enum Gender {
    MALE
    FEMALE
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    hashPassword  String?
    image         String?

    role UserRole @default(PARTICIPANT)

    accounts                        Account[]
    sessions                        Session[]
    ParticipantData                 ParticipantData[]
    ExamMultipleChoiceAnswer        ExamMultipleChoiceAnswer[]
    ExamShortAnswerAnswer           ExamShortAnswerAnswer[]
    ExamAttendance                  ExamAttendance[]
    EventTicket                     EventTicket[]
    MainCompetitionRegistrationData MainCompetitionRegistrationData[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model ParticipantData {
    id String @id @default(cuid())

    userId String

    fullName    String?
    address     String?
    city        String?
    zip         String?
    isSubmitted Boolean @default(false)

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Competition Registration Models
enum CompetitionRegistrationStatus {
    UNREGISTERED
    FORM_FILLING
    SUBMITTED_UNCONFIRMED
    SUBMITTED_CONFIRMED
}

model MainCompetitionParticipantData {
    id String @id @default(cuid())

    firstName  String?
    lastName   String?
    email      String?
    phoneNumber String?
    isAccepted Boolean @default(false)
}

model MainCompetitionRegistrationData {
    id String @id @default(cuid())

    userId String

    status CompetitionRegistrationStatus @default(UNREGISTERED)

    universityName    String?
    universityCountry String?

    isAccepted Boolean @default(false)

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Event Models

enum EventTicketStatus {
    UNATTENDED
    REGISTERED
    PAID_UNCONFIRMED
    PAID_CONFIRMED
}

enum EventStatus {
    PUBLISHED
    UNPUBLISHED
}

model Event {
    id String @id @default(cuid())

    name        String
    description String
    startTime   DateTime
    endTime     DateTime
    location    String
    status      EventStatus @default(UNPUBLISHED)

    EventTicket EventTicket[]
}

model EventTicket {
    id String @id @default(cuid())

    userId  String
    eventId String

    status EventTicketStatus @default(UNATTENDED)

    participantName        String
    participantEmail       String
    participantInstitution String
    participantPhoneNumber String

    paymentDocument Uploaded @default(NO)

    user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
    event Event @relation(fields: [eventId], references: [id])
}

// Competition-Prelimination Exam Models
enum QuestionType {
    MULTIPLE_CHOICE
    SHORT_ANSWER
    ESSAY
}

enum MCAnswerType {
    A
    B
    C
    D
    E
}

model Exam {
    id String @id @default(cuid())

    name        String
    description String
    startTime   DateTime
    endTime     DateTime
    duration    Int
    isPublished Boolean  @default(false)

    multipleChoiceQuestions  ExamMultipleChoice[]
    shortAnswerQuestions     ExamShortAnswer[]
    ExamMultipleChoiceAnswer ExamMultipleChoiceAnswer[]
    ExamShortAnswerAnswer    ExamShortAnswerAnswer[]
    ExamAttendance           ExamAttendance[]
}

model ExamMultipleChoice {
    id String @id @default(cuid())

    examId        String
    question      String
    answerA       String
    answerB       String
    answerC       String?
    answerD       String?
    answerE       String?
    correctAnswer MCAnswerType

    exam                     Exam                       @relation(fields: [examId], references: [id], onDelete: Cascade)
    ExamMultipleChoiceAnswer ExamMultipleChoiceAnswer[]
}

model ExamShortAnswer {
    id String @id @default(cuid())

    examId        String
    question      String
    correctAnswer String

    exam                  Exam                    @relation(fields: [examId], references: [id], onDelete: Cascade)
    ExamShortAnswerAnswer ExamShortAnswerAnswer[]
}

model ExamMultipleChoiceAnswer {
    id String @id @default(cuid())

    examId               String
    userId               String
    examMultipleChoiceId String

    answer MCAnswerType?

    exam               Exam               @relation(fields: [examId], references: [id], onDelete: Cascade)
    user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
    examMultipleChoice ExamMultipleChoice @relation(fields: [examMultipleChoiceId], references: [id], onDelete: Cascade)
}

model ExamShortAnswerAnswer {
    id String @id @default(cuid())

    examId            String
    userId            String
    examShortAnswerId String

    answer String?

    exam            Exam            @relation(fields: [examId], references: [id], onDelete: Cascade)
    user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    examShortAnswer ExamShortAnswer @relation(fields: [examShortAnswerId], references: [id], onDelete: Cascade)
}

enum ExamAttendanceStatus {
    ABSENT
    TAKEN
    FINISHED
}

model ExamAttendance {
    id String @id @default(cuid())

    examId String
    userId String

    status            ExamAttendanceStatus @default(ABSENT)
    durationRemaining Int                  @default(0)

    exam Exam @relation(fields: [examId], references: [id], onDelete: Cascade)
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
