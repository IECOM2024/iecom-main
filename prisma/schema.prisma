// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["metrics", "tracing"]
    binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#String
    url      = env("DATABASE_URL")
}

enum Uploaded {
    YES
    NO
}

enum UserRole {
    PARTICIPANT
    PRELIM_PARTICIPANT
    ADMIN
}

enum Gender {
    MALE
    FEMALE
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    hashPassword  String?
    image         String?

    role UserRole @default(PARTICIPANT)

    accounts                         Account[]
    sessions                         Session[]
    ParticipantData                  ParticipantData[]
    PrelimAttendance                 PrelimAttendance[]
    EventTicket                      EventTicket[]
    MainCompetitionRegistrationData  MainCompetitionRegistrationData[]
    ExamEnrollment                   ExamEnrollment[]
    ColorRunParticipantData          ColorRunParticipantData[]
    EssayCompetitionRegistrationData EssayCompetitionRegistrationData[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model ParticipantData {
    id String @id @default(cuid())

    userId String

    fullName    String?
    address     String?
    city        String?
    zip         String?
    isSubmitted Boolean @default(false)

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Competition Registration Models
enum CompetitionRegistrationStatus {
    UNREGISTERED
    FORM_FILLING
    SUBMITTED_UNCONFIRMED
    SUBMITTED_CONFIRMED
}

model MainCompetitionRegistrationData {
    id String @id @default(cuid())

    userId String

    status CompetitionRegistrationStatus @default(UNREGISTERED)

    teamName                                  String?
    leaderName                                String?
    leaderInstitution                         String?
    leaderMajor                               String?
    leaderBatch                               String?
    leaderEmail                               String?
    leaderPhoneNumber                         String?
    member1Name                               String?
    member1Institution                        String?
    member1Major                              String?
    member1Batch                              String?
    member1Email                              String?
    member1PhoneNumber                        String?
    member2Name                               String?
    member2Institution                        String?
    member2Major                              String?
    member2Batch                              String?
    member2Email                              String?
    member2PhoneNumber                        String?
    member3Name                               String?
    whereDidYouKnowThisCompetitionInformation String?
    leaderPostLink                            String?
    member1PostLink                           String?
    member2PostLink                           String?
    leaderTwibbonLink                         String?
    member1TwibbonLink                        String?
    member2TwibbonLink                        String?

    messageFromAdmin      String?
    isFilePaymentUploaded Boolean @default(false)

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EssayCompetitionRegistrationData {
    id String @id @default(cuid())

    userId String

    status CompetitionRegistrationStatus @default(UNREGISTERED)

    teamName                                  String?
    name                                      String?
    institution                               String?
    major                                     String?
    batch                                     String?
    email                                     String?
    phoneNumber                               String?
    whereDidYouKnowThisCompetitionInformation String?
    postLink                                  String?
    twibbonLink                               String?

    messageFromAdmin      String?
    isFilePaymentUploaded Boolean @default(false)

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Event Models

enum EventTicketStatus {
    UNATTENDED
    REGISTERED
    PAID_UNCONFIRMED
    PAID_CONFIRMED
}

enum EventStatus {
    PUBLISHED
    UNPUBLISHED
}

enum EventType {
    COLOR_RUN
    SEMINAR
}

model Event {
    id String @id @default(cuid())

    name        String
    description String
    startTime   DateTime
    endTime     DateTime
    location    String
    status      EventStatus @default(UNPUBLISHED)
    eventType   EventType   @default(COLOR_RUN)

    EventTicket EventTicket[]
}

model EventTicket {
    id String @id @default(cuid())

    userId  String
    eventId String

    status EventTicketStatus @default(UNATTENDED)

    participantName        String
    participantEmail       String
    participantInstitution String
    participantPhoneNumber String

    paymentDocument Uploaded? @default(NO)

    user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
    event Event @relation(fields: [eventId], references: [id])
}

enum RegistrationStatus {
    UNREGISTERED
    FORM_FILLING
    SUBMITTED_UNCONFIRMED
    SUBMITTED_CONFIRMED
}

enum RegisFor {
    INDIVIDUAL
    BUNDLE
}

enum ParticipantType {
    ITB_STUDENT
    PUBLIC
}

// Color Run Models

model ColorRunParticipantData {
    id String @id @default(cuid())

    name                         String?
    email                        String?
    phoneNumber                  String?
    address                      String?
    institution                  String?
    bloodType                    String?
    healthHistory                String?
    emergencyContactNumber       String?
    emergencyContactName         String?
    emergencyContactRelationship String?

    // For payment
    type      ParticipantType @default(ITB_STUDENT)
    registFor RegisFor        @default(INDIVIDUAL)
    paidby    String?

    status RegistrationStatus @default(UNREGISTERED)

    isFilePaymemtUploaded Boolean @default(false)

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
}

// Feedback Telemetry

// Competition Exam Models
enum ExamType {
    PRELIMARY
    SIMULATION
}

model ExamEnrollment {
    id String @id @default(cuid())

    userId String
    examId String

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    exam Exam @relation(fields: [examId], references: [id], onDelete: Cascade)
}

model Exam {
    id String @id @default(cuid())

    name        String
    description String
    startTime   DateTime
    endTime     DateTime
    duration    Int
    isPublished Boolean  @default(false)

    type ExamType @default(PRELIMARY)

    ExamEnrollment ExamEnrollment[]
    PrelimInfo     PrelimInfo[]
}

// Competition-Prelimination Exam Models

enum MCAnswerType {
    A
    B
    C
    D
    E
}

model PrelimInfo {
    id String @id @default(cuid())

    examId String

    name          String
    description   String
    startTime     DateTime
    endTime       DateTime
    duration      Int
    noOfQuestions Int
    isPublished   Boolean  @default(false)

    PrelimAttendance PrelimAttendance[]
    ProblemData      ProblemData[]
    exam             Exam               @relation(fields: [examId], references: [id], onDelete: Cascade)
}

model PrelimAttendance {
    id String @id @default(cuid())

    userId String

    status            ExamAttendanceStatus @default(ABSENT)
    durationRemaining Int                  @default(0)
    currentNumber     Int                  @default(0)

    user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    prelimInfo   PrelimInfo   @relation(fields: [prelimInfoId], references: [id])
    prelimInfoId String
    answerData   AnswerData[]
}

enum ProblemType {
    MC
    SA
}

model ProblemData {
    id String @id @default(cuid())

    problemType ProblemType

    pNumber            Int
    PrelimInfo         PrelimInfo?          @relation(fields: [prelimInfoId], references: [id])
    prelimInfoId       String?
    ExamMultipleChoice ExamMultipleChoice[]
    ExamShortAnswer    ExamShortAnswer[]
    AnswerData         AnswerData[]
}

model ExamMultipleChoice {
    id String @id @default(cuid())

    examId        String
    question      String
    answerA       String
    answerB       String
    answerC       String?
    answerD       String?
    answerE       String?
    correctAnswer MCAnswerType

    ExamMultipleChoiceAnswer ExamMultipleChoiceAnswer[]
    problemData              ProblemData?               @relation(fields: [problemDataId], references: [id])
    problemDataId            String?
}

model ExamShortAnswer {
    id String @id @default(cuid())

    examId        String
    qNumber       Int
    question      String
    correctAnswer String

    ExamShortAnswerAnswer ExamShortAnswerAnswer[]
    ProblemData           ProblemData?            @relation(fields: [problemDataId], references: [id])
    problemDataId         String?
}

enum FlagStatus {
    UNANSWERED
    FLAGGED
    ANSWERED
}

model AnswerData {
    id String @id @default(cuid())

    answer     String?
    flagStatus FlagStatus @default(UNANSWERED)

    prelimAttendance         PrelimAttendance?          @relation(fields: [prelimAttendanceId], references: [id])
    prelimAttendanceId       String?
    problemData              ProblemData?               @relation(fields: [problemDataId], references: [id])
    problemDataId            String?
    ExamMultipleChoiceAnswer ExamMultipleChoiceAnswer[]
    ExamShortAnswerAnswer    ExamShortAnswerAnswer[]
}

model ExamMultipleChoiceAnswer {
    id String @id @default(cuid())

    examId String

    answer String

    answerData           AnswerData?        @relation(fields: [answerDataId], references: [id])
    answerDataId         String?
    examMultipleChoice   ExamMultipleChoice @relation(fields: [examMultipleChoiceId], references: [id], onDelete: Cascade)
    examMultipleChoiceId String
}

model ExamShortAnswerAnswer {
    id String @id @default(cuid())

    examId String
    userId String

    answer String?

    answerData        AnswerData?     @relation(fields: [answerDataId], references: [id])
    answerDataId      String?
    examShortAnswer   ExamShortAnswer @relation(fields: [examShortAnswerId], references: [id], onDelete: Cascade)
    examShortAnswerId String
}

enum ExamAttendanceStatus {
    ABSENT
    TAKEN
    PAUSED
    FINISHED
}
